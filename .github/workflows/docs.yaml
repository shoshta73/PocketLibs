name: docs

on:
  push:
    paths:
      [
        "docs/**",
        "docs/build-graphs.sh",
        "docs/graphs/**",
        ".github/workflows/docs.yaml",
      ]
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-graphs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Restore graphs
        uses: actions/cache/restore@v4
        id: cache-graphs-restore
        with:
          path: docs/src/assets
          key: ${{ runner.os }}-graphs-${{ hashFiles('./docs/graphs/**', './docs/build_graphs.py') }}

      - name: Install Python
        if: steps.cache-graphs-restore.outputs.cache-hit != 'true'
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Install graphviz
        if: steps.cache-graphs-restore.outputs.cache-hit != 'true'
        run: sudo apt-get update && sudo apt-get install -y graphviz

      - name: build graphs
        if: steps.cache-graphs-restore.outputs.cache-hit != 'true'
        run: python ./docs/build_graphs.py

      - name: Upload graphs artifact
        uses: actions/upload-artifact@v5
        with:
          name: graphs
          path: docs/src/assets

      - name: Cache graphs
        id: cache-graphs-save
        if: steps.cache-graphs-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: docs/src/assets
          key: ${{ steps.cache-graphs-restore.outputs.cache-primary-key }}

  build-docs:
    needs: build-graphs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Restore Cargo
        uses: actions/cache/restore@v4
        id: cache-cargo-restore
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            ./docs/book.toml
          key: ${{ runner.os }}-cargo-${{ hashFiles('./docs/book.web.toml') }}

      - name: Install mdbook
        if: steps.cache-cargo-restore.outputs.cache-hit != 'true'
        run: |
          cargo install mdbook --version 0.4.52

      - name: Install mdbook-alerts
        if: steps.cache-cargo-restore.outputs.cache-hit != 'true'
        run: |
          cargo install mdbook-alerts --version 0.8.0

      - name: book.toml
        if: steps.cache-cargo-restore.outputs.cache-hit != 'true'
        run: cp docs/book.web.toml docs/book.toml

      - name: Retrive graphs
        uses: actions/download-artifact@v6
        with:
          name: graphs
          path: docs/src/assets

      - name: Build docs
        run: cd docs && mdbook build

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/book

      - name: Cache Cargo
        id: cache-cargo-save
        if: steps.cache-cargo-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            ./docs/book.toml
          key: ${{ steps.cache-cargo-restore.outputs.cache-primary-key }}

  deploy-docs:
    needs: build-docs
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
